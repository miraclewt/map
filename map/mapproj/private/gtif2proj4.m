function proj4  = gtif2proj4(psDefn)
%GTIF2PROJ4 Convert a GTIF structure to a PROJ.4 string
%
%   PROJ4 = GTIF2PROJ4(GTIF) returns a PROJ.4 string using the values in
%   the GTIF structure, GTIF.
%
%   See also PROJ2GTIF.

% Copyright 2012 The MathWorks, Inc.

% Handle projection methods.
ModelTypeGeographic = 2;
MapSys_UTM_North = -9001;

if (psDefn.GeoTIFFCodes.Model==ModelTypeGeographic)
    % Geographic.
    szProjection = '+proj=latlong ';
elseif (psDefn.GeoTIFFCodes.MapSys == MapSys_UTM_North )
    % UTM.
    szProjection = sprintf('+proj=utm +zone=%d ', psDefn.Zone);
else
    % Translate CT_Projection code.
    code = psDefn.GeoTIFFCodes.CTProjection;
    szProjection = translateCTProjectionCode(code, psDefn.ProjParm);
end

if ~isempty(szProjection)
    % Translate Ellipsoid code.
    if ~isfield(psDefn.GeoTIFFCodes, 'Ellipsoid')
        code = '';
    else
        code = psDefn.GeoTIFFCodes.Ellipsoid;
    end
    szEllipse = translateEllipsoidCode(code, psDefn.SemiMajor, psDefn.SemiMinor);
    
    % Translate the units of measure.
    code = psDefn.GeoTIFFCodes.UOMLength;
    if ~isfield(psDefn, 'UOMLengthInMeters')
        uomLengthInMeters = 1;
    else
        uomLengthInMeters = psDefn.UOMLengthInMeters;
    end
    szUnits = translateUOMLengthCode(code, uomLengthInMeters);
    
    % Copy the values into the projection string.
    szProjection = [szProjection szEllipse szUnits];
end

% Set the return string.
proj4 = szProjection;

%-----------------------------------------------------------------------

function szProjection = translateCTProjectionCode(code, ProjParm)
% Translate CTProjection code into a PROJ.4 string.

% False easting and northing are in meters and that is what
% PROJ.4 wants regardless of the linear units.
dfFalseEasting  = ProjParm(6);
dfFalseNorthing = ProjParm(7);

S = projcode(code);
ctProjection = S.CTProjection;

switch ctProjection
    % Transverse Mercator
    case 'CT_TransverseMercator'
        szProjection = sprintf( ...
            '+proj=tmerc +lat_0=%.9f +lon_0=%.9f +k=%f +x_0=%.3f +y_0=%.3f ', ...
            ProjParm(1), ...
            ProjParm(2), ...
            ProjParm(5), ...
            dfFalseEasting, ...
            dfFalseNorthing);
        
    % Mercator
    case 'CT_Mercator'
        szProjection = sprintf( ...
            '+proj=merc +lat_ts=%.9f +lon_0=%.9f +k=%f +x_0=%.3f +y_0=%.3f ', ...
            ProjParm(1), ...
            ProjParm(2), ...
            ProjParm(5), ...
            dfFalseEasting, ...
            dfFalseNorthing);
        
    % Cassini/Soldner
    case 'CT_CassiniSoldner'
        szProjection = sprintf( ...
            '+proj=cass +lat_0=%.9f +lon_0=%.9f +x_0=%.3f +y_0=%.3f ', ...
            ProjParm(1), ...
            ProjParm(2), ...
            dfFalseEasting, ...
            dfFalseNorthing);
        
    % Oblique Stereographic
    % (Should this really map onto Stereographic?)
    case 'CT_ObliqueStereographic'
        szProjection = sprintf( ...
            '+proj=stere +lat_0=%.9f +lon_0=%.9f +k=%f +x_0=%.3f +y_0=%.3f ', ...
            ProjParm(1), ...
            ProjParm(2), ...
            ProjParm(5), ...
            dfFalseEasting, ...
            dfFalseNorthing);
        
    % Stereographic
    case 'CT_Stereographic'
        szProjection = sprintf( ...
            '+proj=stere +lat_0=%.9f +lon_0=%.9f +x_0=%.3f +y_0=%.3f ', ...
            ProjParm(1), ...
            ProjParm(2), ...
            dfFalseEasting, ...
            dfFalseNorthing);
        
    % Polar Stereographic
    case 'CT_PolarStereographic'
       if( ProjParm(1) >= 0.0)
            lat0 =  90;
        else
            lat0 = -90;
       end
       
       szProjection = sprintf( ...
           ['+proj=stere +lat_0=%d +lat_ts=%.9f +lon_0=%.9f ', ....
           '+k=%.9f +x_0=%.3f +y_0=%.3f '], ...
           lat0, ...
           ProjParm(1), ...
           ProjParm(2), ...
           ProjParm(5), ...
           dfFalseEasting, ...
           dfFalseNorthing);
 
    % Equirectangular
    case 'CT_Equirectangular'
        szProjection = sprintf( ...
            '+proj=eqc +lat_0=%.9f +lon_0=%.9f +lat_ts=%.9f +x_0=%.3f +y_0=%.3f ', ...
            ProjParm(1), ...
            ProjParm(2), ...
            ProjParm(3), ...
            dfFalseEasting, ...
            dfFalseNorthing);
        
    % Gnomonic
    case 'CT_Gnomonic'
        szProjection = sprintf( ...
            '+proj=gnom +lat_0=%.9f +lon_0=%.9f +x_0=%.3f +y_0=%.3f ', ...
            ProjParm(1), ...
            ProjParm(2), ...
            dfFalseEasting, ...
            dfFalseNorthing);
         
    % Orthographic
    case 'CT_Orthographic'
        szProjection = sprintf( ...
            '+proj=ortho +lat_0=%.9f +lon_0=%.9f +x_0=%.3f +y_0=%.3f ', ...
            ProjParm(1), ...
            ProjParm(2), ...
            dfFalseEasting, ...
            dfFalseNorthing);
        
    % Lambert Azimuthal Equal Area
    case 'CT_LambertAzimEqualArea'
        szProjection = sprintf( ...
            '+proj=laea +lat_0=%.9f +lon_0=%.9f +x_0=%.3f +y_0=%.3f ', ...
            ProjParm(1), ...
            ProjParm(2), ...
            dfFalseEasting, ...
            dfFalseNorthing);
        
    % Azimuthal Equidistant
    case 'CT_AzimuthalEquidistant'
        szProjection = sprintf( ...
            '+proj=aeqd +lat_0=%.9f +lon_0=%.9f +x_0=%.3f +y_0=%.3f ', ...
            ProjParm(1), ...
            ProjParm(2), ...
            dfFalseEasting, ...
            dfFalseNorthing);
        
    % Miller Cylindrical
    case 'CT_MillerCylindrical'
        szProjection = sprintf( ...
            '+proj=mill +lat_0=%.9f +lon_0=%.9f +x_0=%.3f +y_0=%.3f +R_A ', ...
            ProjParm(1), ...
            ProjParm(2), ...
            dfFalseEasting, ...
            dfFalseNorthing);
        
    % Polyconic
    case 'CT_Polyconic'
        szProjection = sprintf( ...
            '+proj=poly +lat_0=%.9f +lon_0=%.9f +x_0=%.3f +y_0=%.3f ', ...
            ProjParm(1), ...
            ProjParm(2), ...
            dfFalseEasting, ...
            dfFalseNorthing);
        
    % AlbersEqualArea
    case 'CT_AlbersEqualArea'
        szProjection = sprintf( ...
            ['+proj=aea +lat_1=%.9f +lat_2=%.9f +lat_0=%.9f +lon_0=%.9f', ...
            ' +x_0=%.3f +y_0=%.3f '], ...
            ProjParm(1), ...
            ProjParm(2), ...
            ProjParm(3), ...
            ProjParm(4), ...
            dfFalseEasting, ...
            dfFalseNorthing);
        
    % EquidistantConic
    case 'CT_EquidistantConic'
        szProjection = sprintf( ...
            ['+proj=eqdc +lat_1=%.9f +lat_2=%.9f +lat_0=%.9f +lon_0=%.9f', ...
            ' +x_0=%.3f +y_0=%.3f '], ...
            ProjParm(1), ...
            ProjParm(2), ...
            ProjParm(3), ...
            ProjParm(4), ...
            dfFalseEasting, ...
            dfFalseNorthing);
        
    % Robinson
    case 'CT_Robinson'
        szProjection = sprintf( ...
            '+proj=robin +lon_0=%.9f +x_0=%.3f +y_0=%.3f ', ...
            ProjParm(2), ...
            dfFalseEasting, ...
            dfFalseNorthing);
        
    % VanDerGrinten
    case 'CT_VanDerGrinten'
        szProjection = sprintf( ...
            '+proj=vandg +lon_0=%.9f +x_0=%.3f +y_0=%.3f +R_A ', ...
            ProjParm(2), ...
            dfFalseEasting, ...
            dfFalseNorthing);
        
    % Sinusoidal
    case 'CT_Sinusoidal'
        szProjection = sprintf( ...
            '+proj=sinu +lon_0=%.9f +x_0=%.3f +y_0=%.3f ', ...
            ProjParm(2), ...
            dfFalseEasting, ...
            dfFalseNorthing);
        
    % LambertConfConic_2SP
    case 'CT_LambertConfConic_2SP'
        szProjection = sprintf( ...
            ['+proj=lcc +lat_0=%.9f +lon_0=%.9f +lat_1=%.9f +lat_2=%.9f ', ...
            ' +x_0=%.3f +y_0=%.3f '], ...
            ProjParm(1), ...
            ProjParm(2), ...
            ProjParm(3), ...
            ProjParm(4), ...
            dfFalseEasting, ...
            dfFalseNorthing);
        
    % LambertConfConic_1SP
    case 'CT_LambertConfConic_1SP'
        szProjection = sprintf( ...
            ['+proj=lcc +lat_0=%.9f +lat_1=%.9f +lon_0=%.9f', ...
            ' +k_0=%.9f +x_0=%.3f +y_0=%.3f '], ...
            ProjParm(1), ...
            ProjParm(1), ...
            ProjParm(2), ...
            ProjParm(5), ...
            ProjParm(6), ...
            ProjParm(7));
        
    % CylindricalEqualArea
    case 'CT_CylindricalEqualArea'
        szProjection = sprintf( ...
            '+proj=cea +lat_ts=%.9f +lon_0=%.9f +x_0=%.3f +y_0=%.3f ', ...
            ProjParm(1), ...
            ProjParm(2), ...
            ProjParm(6), ...
            ProjParm(7));
        
    % NewZealandMapGrid
    case 'CT_NewZealandMapGrid'
        szProjection = sprintf( ...
            '+proj=nzmg +lat_0=%.9f +lon_0=%.9f +x_0=%.3f +y_0=%.3f ', ...
            ProjParm(1), ...
            ProjParm(2), ...
            ProjParm(6), ...
            ProjParm(7));
        
    % Transverse Mercator - south oriented.
    % this appears to be an unsupported formulation with PROJ.4
    case 'CT_TransvMercator_SouthOriented'
        szProjection = '';
        
    % ObliqueMercator (Hotine)
    case 'CT_ObliqueMercator'
        % not clear how ProjParm(5) - angle from rectified to skewed grid -
        % should be applied ... see the +not_rot flag for PROJ.4.
        % Just ignoring for now.
        szProjection = sprintf( ...
            ['+proj=omerc +lat_0=%.9f +lonc=%.9f +alpha=%.9f', ...
            ' +k=%.9f +x_0=%.3f +y_0=%.3f '], ...
            ProjParm(1), ...
            ProjParm(2), ...
            ProjParm(3), ...
            ProjParm(5), ...
            ProjParm(6), ...
            ProjParm(7));
        
    otherwise
        szProjection = '';
end

%-----------------------------------------------------------------------

function szUnits = translateUOMLengthCode(code, lengthInMeters)
% Translate the unit of measure code to a string suitable for PROJ.4

% Note that even with a +units, or +to_meter in effect, it is
% still assumed that all the projection parameters are in meters.

Linear_Meter = 9001;
Linear_Foot = 9002;
Linear_Foot_US_Survey = 9003;
Linear_Foot_Indian = 9006;
Linear_Link = 9007;
Linear_Yard_Indian = 9013;
Linear_Fathom = 9014;
Linear_Mile_International_Nautical = 9015;

switch code
    case Linear_Meter
        szUnits = '+units=m ';
        
    case Linear_Foot
        szUnits = '+units=ft ';
        
    case Linear_Foot_US_Survey
        szUnits = '+units=us-ft ';
        
    case Linear_Foot_Indian
        szUnits = '+units=ind-ft ';
        
    case  Linear_Link
        szUnits = '+units=link ';
        
    case Linear_Yard_Indian
        szUnits = '+units=ind-yd ';
        
    case Linear_Fathom
        szUnits = '+units=fath ';
        
    case Linear_Mile_International_Nautical
        szUnits = '+units=kmi ';
        
    otherwise
        szUnits = sprintf('+to_meter=%.10f', lengthInMeters);
end

%-----------------------------------------------------------------------

function szEllipse = translateEllipsoidCode(code, semiMajor, semiMinor)
% Translate ellipsoid code to a PROJ.4 string.

Ellipse_WGS_84      = 7030;
Ellipse_Clarke_1866 = 7008;
Ellipse_Clarke_1880 = 7034;
Ellipse_GRS_1980    = 7019;

% Handle ellipsoid information.
switch code
    case  Ellipse_WGS_84
        szEllipse = '+ellps=WGS84 ';
        
    case Ellipse_Clarke_1866
        szEllipse = '+ellps=clrk66 ';
        
    case Ellipse_Clarke_1880
        szEllipse = '+ellps=clrk80 ';
        
    case Ellipse_GRS_1980
        szEllipse = '+ellps=GRS80 ';
        
    otherwise
        if ~isempty(semiMajor) && ~isempty(semiMinor) ...
                && semiMajor ~= 0.0 && semiMinor ~= 0.0
            szEllipse = sprintf('+a=%.3f +b=%.3f ', semiMajor, semiMinor);
        else
            szEllipse = '';
        end
end
